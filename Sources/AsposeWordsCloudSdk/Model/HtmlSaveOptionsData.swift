/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="HtmlSaveOptionsData.swift">
 *   Copyright (c) 2019 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */

import Foundation

public class HtmlSaveOptionsData : SaveOptionsData {
    // Gets or sets specifies version of HTML standard that should be used when saving the document to HTML or MHTML. Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
    public enum HtmlVersion
    { 
        // Enum value "xhtml"
        case xhtml
        
        // Enum value "html5"
        case html5
        
    }

    // Gets or sets specifies in what format metafiles are saved when exporting to HTML, MHTML, or EPUB. Default value is Aspose.Words.Saving.HtmlMetafileFormat.Png, meaning that metafiles are rendered to raster PNG images.  Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF images into PNG files when exporting to HTML.Other options are to convert metafiles to SVG images or to export them as is without conversion. Some image transforms, in particular image cropping, will not be applied to metafile images if they are exported to HTML without conversion.
    public enum MetafileFormat
    { 
        // Enum value "png"
        case png
        
        // Enum value "svg"
        case svg
        
        // Enum value "emfOrWmf"
        case emfOrWmf
        
    }

    // Gets or sets controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.
    public enum OfficeMathOutputMode
    { 
        // Enum value "image"
        case image
        
        // Enum value "mathML"
        case mathML
        
        // Enum value "text"
        case text
        
    }

        
    // Gets or sets specifies whether negative left and right indents of paragraphs are allowed (not normalized).
    private let allowNegativeIndent : Bool?;
    // Gets or sets specifies a prefix which is added to all CSS class names. Default value is an empty string and generated CSS class names have no common prefix.  If this value is not empty, all CSS classes generated by Aspose.Words will start with the specified prefix.This might be useful, for example, if you add custom CSS to generated documents and want to prevent class name conflicts. If the value is not null or empty, it must be a valid CSS identifier.
    private let cssClassNamePrefix : String?;
    // Gets or sets specifies the name of the CSS file written when the document is exported to HTML.
    private let cssStyleSheetFileName : String?;
    // Gets or sets specifies how CSS styles are exported.
    private let cssStyleSheetType : String?;
    // Gets or sets specifies how the document should be split when saving.
    private let documentSplitCriteria : String?;
    // Gets or sets specifies the maximum level of headings at which to split the document.
    private let documentSplitHeadingLevel : Int?;
    // Gets or sets specifies the encoding to use when exporting.
    private let encoding : String?;
    // Gets or sets specifies whether to export built-in and custom document properties.
    private let exportDocumentProperties : Bool?;
    // Gets or sets controls how drop-down form fields are saved to HTML. Default value is false.
    private let exportDropDownFormFieldAsText : Bool?;
    // Gets or sets specifies whether font resources should be exported.
    private let exportFontResources : Bool?;
    // Gets or sets specifies whether fonts resources should be embedded to HTML in Base64 encoding.  Default is false.
    private let exportFontsAsBase64 : Bool?;
    // Gets or sets specifies how headers and footers are output.
    private let exportHeadersFootersMode : String?;
    // Gets or sets specifies whether images are saved in Base64 format.
    private let exportImagesAsBase64 : Bool?;
    // Gets or sets specifies whether language information is exported.
    private let exportLanguageInformation : Bool?;
    // Gets or sets controls how list labels are output.
    private let exportListLabels : String?;
    // Gets or sets specifies whether original URL should be used as the URL of the linked images. Default value is false.
    private let exportOriginalUrlForLinkedImages : Bool?;
    // Gets or sets specifies whether page margins is exported to HTML, MHTML or EPUB. Default is false.
    private let exportPageMargins : Bool?;
    // Gets or sets specifies whether page setup is exported.
    private let exportPageSetup : Bool?;
    // Gets or sets specifies whether font sizes should be output in relative units when saving.
    private let exportRelativeFontSize : Bool?;
    // Gets or sets specifies whether to write the roundtrip information when saving to HTML Default value is true.
    private let exportRoundtripInformation : Bool?;
    // Gets or sets controls how textboxes represented by Aspose.Words.Drawing.Shape are saved to HTML, MHTML or EPUB. Default value is false.    When set to true, exports textboxes as inline \&quot;svg\&quot; elements. When false, exports as \&quot;image\&quot; elements.
    private let exportTextBoxAsSvg : Bool?;
    // Gets or sets controls how text input form fields are saved.
    private let exportTextInputFormFieldAsText : Bool?;
    // Gets or sets specifies whether to write page numbers to table of contents when saving.
    private let exportTocPageNumbers : Bool?;
    // Gets or sets specifies whether to write the DOCTYPE declaration when saving.
    private let exportXhtmlTransitional : Bool?;
    // Gets or sets controls which font resources need subsetting when saving.
    private let fontResourcesSubsettingSizeThreshold : Int?;
    // Gets or sets specifies the physical folder where fonts are saved when exporting a document.
    private let fontsFolder : String?;
    // Gets or sets specifies the name of the folder used to construct font URIs.
    private let fontsFolderAlias : String?;
    // Gets or sets specifies version of HTML standard that should be used when saving the document to HTML or MHTML. Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
    private let htmlVersion : HtmlVersion?;
    // Gets or sets specifies the output resolution for images when exporting.
    private let imageResolution : Int?;
    // Gets or sets specifies the physical folder where images are saved when exporting a document.
    private let imagesFolder : String?;
    // Gets or sets specifies the name of the folder used to construct image URIs.
    private let imagesFolderAlias : String?;
    // Gets or sets specifies in what format metafiles are saved when exporting to HTML, MHTML, or EPUB. Default value is Aspose.Words.Saving.HtmlMetafileFormat.Png, meaning that metafiles are rendered to raster PNG images.  Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF images into PNG files when exporting to HTML.Other options are to convert metafiles to SVG images or to export them as is without conversion. Some image transforms, in particular image cropping, will not be applied to metafile images if they are exported to HTML without conversion.
    private let metafileFormat : MetafileFormat?;
    // Gets or sets controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.
    private let officeMathOutputMode : OfficeMathOutputMode?;
    // Gets or sets specifies whether or not use pretty formats output.
    private let prettyFormat : Bool?;
    // Gets or sets specifies whether font family names used in the document are resolved and substituted according to FontSettings when being written into HTML-based formats. default value is false.
    private let resolveFontNames : Bool?;
    // Gets or sets specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. Default is an empty string.
    private let resourceFolder : String?;
    // Gets or sets specifies the name of the folder used to construct URIs of all resources written into an HTML document.  Default is an empty string.
    private let resourceFolderAlias : String?;
    // Gets or sets specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting.
    private let scaleImageToShapeSize : Bool?;
    // Gets or sets controls how table, row and cell widths are exported.
    private let tableWidthOutputMode : String?;
        
    public init(allowNegativeIndent : Bool? = nil, cssClassNamePrefix : String? = nil, cssStyleSheetFileName : String? = nil, cssStyleSheetType : String? = nil, documentSplitCriteria : String? = nil, documentSplitHeadingLevel : Int? = nil, encoding : String? = nil, exportDocumentProperties : Bool? = nil, exportDropDownFormFieldAsText : Bool? = nil, exportFontResources : Bool? = nil, exportFontsAsBase64 : Bool? = nil, exportHeadersFootersMode : String? = nil, exportImagesAsBase64 : Bool? = nil, exportLanguageInformation : Bool? = nil, exportListLabels : String? = nil, exportOriginalUrlForLinkedImages : Bool? = nil, exportPageMargins : Bool? = nil, exportPageSetup : Bool? = nil, exportRelativeFontSize : Bool? = nil, exportRoundtripInformation : Bool? = nil, exportTextBoxAsSvg : Bool? = nil, exportTextInputFormFieldAsText : Bool? = nil, exportTocPageNumbers : Bool? = nil, exportXhtmlTransitional : Bool? = nil, fontResourcesSubsettingSizeThreshold : Int? = nil, fontsFolder : String? = nil, fontsFolderAlias : String? = nil, htmlVersion : HtmlVersion? = nil, imageResolution : Int? = nil, imagesFolder : String? = nil, imagesFolderAlias : String? = nil, metafileFormat : MetafileFormat? = nil, officeMathOutputMode : OfficeMathOutputMode? = nil, prettyFormat : Bool? = nil, resolveFontNames : Bool? = nil, resourceFolder : String? = nil, resourceFolderAlias : String? = nil, scaleImageToShapeSize : Bool? = nil, tableWidthOutputMode : String? = nil) {
        self.allowNegativeIndent = allowNegativeIndent;
        self.cssClassNamePrefix = cssClassNamePrefix;
        self.cssStyleSheetFileName = cssStyleSheetFileName;
        self.cssStyleSheetType = cssStyleSheetType;
        self.documentSplitCriteria = documentSplitCriteria;
        self.documentSplitHeadingLevel = documentSplitHeadingLevel;
        self.encoding = encoding;
        self.exportDocumentProperties = exportDocumentProperties;
        self.exportDropDownFormFieldAsText = exportDropDownFormFieldAsText;
        self.exportFontResources = exportFontResources;
        self.exportFontsAsBase64 = exportFontsAsBase64;
        self.exportHeadersFootersMode = exportHeadersFootersMode;
        self.exportImagesAsBase64 = exportImagesAsBase64;
        self.exportLanguageInformation = exportLanguageInformation;
        self.exportListLabels = exportListLabels;
        self.exportOriginalUrlForLinkedImages = exportOriginalUrlForLinkedImages;
        self.exportPageMargins = exportPageMargins;
        self.exportPageSetup = exportPageSetup;
        self.exportRelativeFontSize = exportRelativeFontSize;
        self.exportRoundtripInformation = exportRoundtripInformation;
        self.exportTextBoxAsSvg = exportTextBoxAsSvg;
        self.exportTextInputFormFieldAsText = exportTextInputFormFieldAsText;
        self.exportTocPageNumbers = exportTocPageNumbers;
        self.exportXhtmlTransitional = exportXhtmlTransitional;
        self.fontResourcesSubsettingSizeThreshold = fontResourcesSubsettingSizeThreshold;
        self.fontsFolder = fontsFolder;
        self.fontsFolderAlias = fontsFolderAlias;
        self.htmlVersion = htmlVersion;
        self.imageResolution = imageResolution;
        self.imagesFolder = imagesFolder;
        self.imagesFolderAlias = imagesFolderAlias;
        self.metafileFormat = metafileFormat;
        self.officeMathOutputMode = officeMathOutputMode;
        self.prettyFormat = prettyFormat;
        self.resolveFontNames = resolveFontNames;
        self.resourceFolder = resourceFolder;
        self.resourceFolderAlias = resourceFolderAlias;
        self.scaleImageToShapeSize = scaleImageToShapeSize;
        self.tableWidthOutputMode = tableWidthOutputMode;
    }
        
    public func getAllowNegativeIndent() -> Bool? {
        return self.allowNegativeIndent;
    }
    public func getCssClassNamePrefix() -> String? {
        return self.cssClassNamePrefix;
    }
    public func getCssStyleSheetFileName() -> String? {
        return self.cssStyleSheetFileName;
    }
    public func getCssStyleSheetType() -> String? {
        return self.cssStyleSheetType;
    }
    public func getDocumentSplitCriteria() -> String? {
        return self.documentSplitCriteria;
    }
    public func getDocumentSplitHeadingLevel() -> Int? {
        return self.documentSplitHeadingLevel;
    }
    public func getEncoding() -> String? {
        return self.encoding;
    }
    public func getExportDocumentProperties() -> Bool? {
        return self.exportDocumentProperties;
    }
    public func getExportDropDownFormFieldAsText() -> Bool? {
        return self.exportDropDownFormFieldAsText;
    }
    public func getExportFontResources() -> Bool? {
        return self.exportFontResources;
    }
    public func getExportFontsAsBase64() -> Bool? {
        return self.exportFontsAsBase64;
    }
    public func getExportHeadersFootersMode() -> String? {
        return self.exportHeadersFootersMode;
    }
    public func getExportImagesAsBase64() -> Bool? {
        return self.exportImagesAsBase64;
    }
    public func getExportLanguageInformation() -> Bool? {
        return self.exportLanguageInformation;
    }
    public func getExportListLabels() -> String? {
        return self.exportListLabels;
    }
    public func getExportOriginalUrlForLinkedImages() -> Bool? {
        return self.exportOriginalUrlForLinkedImages;
    }
    public func getExportPageMargins() -> Bool? {
        return self.exportPageMargins;
    }
    public func getExportPageSetup() -> Bool? {
        return self.exportPageSetup;
    }
    public func getExportRelativeFontSize() -> Bool? {
        return self.exportRelativeFontSize;
    }
    public func getExportRoundtripInformation() -> Bool? {
        return self.exportRoundtripInformation;
    }
    public func getExportTextBoxAsSvg() -> Bool? {
        return self.exportTextBoxAsSvg;
    }
    public func getExportTextInputFormFieldAsText() -> Bool? {
        return self.exportTextInputFormFieldAsText;
    }
    public func getExportTocPageNumbers() -> Bool? {
        return self.exportTocPageNumbers;
    }
    public func getExportXhtmlTransitional() -> Bool? {
        return self.exportXhtmlTransitional;
    }
    public func getFontResourcesSubsettingSizeThreshold() -> Int? {
        return self.fontResourcesSubsettingSizeThreshold;
    }
    public func getFontsFolder() -> String? {
        return self.fontsFolder;
    }
    public func getFontsFolderAlias() -> String? {
        return self.fontsFolderAlias;
    }
    public func getHtmlVersion() -> HtmlVersion? {
        return self.htmlVersion;
    }
    public func getImageResolution() -> Int? {
        return self.imageResolution;
    }
    public func getImagesFolder() -> String? {
        return self.imagesFolder;
    }
    public func getImagesFolderAlias() -> String? {
        return self.imagesFolderAlias;
    }
    public func getMetafileFormat() -> MetafileFormat? {
        return self.metafileFormat;
    }
    public func getOfficeMathOutputMode() -> OfficeMathOutputMode? {
        return self.officeMathOutputMode;
    }
    public func getPrettyFormat() -> Bool? {
        return self.prettyFormat;
    }
    public func getResolveFontNames() -> Bool? {
        return self.resolveFontNames;
    }
    public func getResourceFolder() -> String? {
        return self.resourceFolder;
    }
    public func getResourceFolderAlias() -> String? {
        return self.resourceFolderAlias;
    }
    public func getScaleImageToShapeSize() -> Bool? {
        return self.scaleImageToShapeSize;
    }
    public func getTableWidthOutputMode() -> String? {
        return self.tableWidthOutputMode;
    }
}
